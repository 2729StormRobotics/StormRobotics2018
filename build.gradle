plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.22"
    id "org.sonarqube" version "2.6"
    // id "net.ltgt.errorprone" version "0.0.13"
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:all"
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:all"
}

def TEAM = 2729
def ROBOT_CLASS = "robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
	compile openrio.powerup.matchData()
    compile pathfinder()

    compile name: 'json-simple-1.1.1'
//    errorprone 'com.google.errorprone:error_prone_core:2.2.0'

    //runtime fileTree(dir: 'libs', include: '*.jar')
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5'
}

// GradleRIO reports some anonymous data to aid in future development
// This includes your gradle version, dependencies, plugins and versions.
// It does NOT include your IP address, username, password, or other confidential
// data.
// You can choose to disable this telemetry if you're paranoid.
// Telemetry is, by default, enabled.
telemetry {
    reportTelemetry = false
}

